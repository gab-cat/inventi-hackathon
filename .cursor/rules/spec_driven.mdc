---
description: Comprehensive spec-driven development workflow that ensures systematic analysis, planning, and implementation for every feature request
globs: **/*.ts,**/*.tsx,**/*.js,**/*.jsx,**/*.md,**/*.mdc
alwaysApply: true
---

# SPEC-DRIVEN DEVELOPMENT WORKFLOW

**SPEC MODE: Manual Activation Required.**

## OVERVIEW

This spec-driven development workflow ensures that every feature request undergoes systematic analysis and planning before implementation. The process follows a **two-stage approach**:

### STAGE 1: PLANNING (Spec Creation)
Three-phase approach for comprehensive planning:
1. **SPEC Phase**: High-level analysis and conceptual design
2. **REQUIREMENTS Phase**: Detailed functional and technical requirements
3. **TASKS Phase**: Implementation-ready task breakdown

### STAGE 2: IMPLEMENTATION (Code Development)
Separate implementation phase where development agents execute the planned tasks and iterate on completion.

## FILE STRUCTURE

All specification files are organized in the `.spec/` folder with the following structure:

```
.spec/
├── <feature-name>/
│   ├── spec.md              # High-level specification
│   ├── requirements.md      # Detailed requirements
│   └── tasks.md             # Implementation tasks
├── templates/
│   ├── spec-template.md
│   ├── requirements-template.md
│   └── tasks-template.md
└── guidelines.md            # This file
```

## WORKFLOW PROCESS

### ACTIVATION TRIGGER
**SPEC MODE is activated ONLY when you explicitly say "SPEC DRIVEN" in your chat message.**

When activated, the workflow follows this sequence:

### STAGE 1: PLANNING PHASE
Complete planning and documentation before any code implementation begins.

#### Phase 1: SPEC CREATION
**Trigger**: User says "SPEC DRIVEN" + feature request
**Output**: `.spec/<feature-name>/spec.md`

**Spec Creation Process:**

1. **Context Analysis**
   - Analyze the feature request for scope and complexity
   - Identify affected systems and components
   - Determine stakeholder impact
   - Assess technical feasibility

2. **Problem Definition**
   - Clearly state the problem being solved
   - Define success criteria
   - Identify constraints and limitations
   - Document assumptions

3. **Solution Concept**
   - High-level solution approach
   - Technology stack considerations
   - Architecture impact assessment
   - Risk identification

4. **Acceptance Criteria**
   - Functional requirements (what the feature does)
   - Non-functional requirements (performance, security, etc.)
   - User experience expectations
   - Success metrics

### Phase 2: REQUIREMENTS DEVELOPMENT

**Trigger**: Spec approval or automatic progression
**Input**: `.spec/<feature-name>/spec.md`
**Output**: `.spec/<feature-name>/requirements.md`

**Requirements Development Process:**

1. **Functional Requirements**
   - User stories in format: "As a [user], I want [functionality] so that [benefit]"
   - Use case scenarios
   - Business rules and workflows
   - Data requirements and validations

2. **Technical Requirements**
   - API specifications
   - Database schema changes
   - Integration requirements
   - Performance benchmarks
   - Security requirements

3. **User Experience Requirements**
   - UI/UX specifications
   - Accessibility requirements (WCAG 2.1 AA compliance)
   - Responsive design requirements
   - Cross-browser compatibility

4. **Quality Assurance Requirements**
   - Testing strategy (unit, integration, e2e)
   - Code quality standards
   - Documentation requirements
   - Deployment and rollback procedures

### Phase 3: TASK BREAKDOWN

**Trigger**: Requirements approval or automatic progression
**Input**: `.spec/<feature-name>/requirements.md`
**Output**: `.spec/<feature-name>/tasks.md`

**Task Breakdown Process:**

1. **Implementation Tasks**
   - Backend API development
   - Frontend component development
   - Database migrations
   - Configuration changes

2. **Testing Tasks**
   - Unit test implementation
   - Integration test development
   - End-to-end test creation
   - Performance testing

3. **Documentation Tasks**
   - API documentation updates
   - User guide updates
   - Code documentation
   - Deployment documentation

4. **Quality Assurance Tasks**
   - Code review assignments
   - Security review
   - Accessibility audit
   - Performance optimization

### STAGE 2: IMPLEMENTATION PHASE
**Trigger**: User explicitly requests implementation after planning is complete
**Input**: `.spec/<feature-name>/tasks.md`
**Process**: Development agents execute tasks and iterate on completion

**Implementation Process:**

1. **Task Execution**
   - Development agents work through the task list systematically
   - Each task must be marked complete before moving to the next
   - Implementation follows the detailed specifications in the planning documents

2. **Iteration and Verification**
   - Agents must iterate on task completion, checking off items as they're finished
   - No task is considered complete until thoroughly tested and verified
   - Agents continue working until all tasks in the list are completed

3. **Quality Assurance**
   - Code must pass all linting and type checking
   - Tests must be implemented and passing
   - Documentation must be updated
   - Code review process must be completed

4. **Completion Criteria**
   - All tasks in the task list are checked off
   - Feature meets all acceptance criteria from the spec
   - Code is production-ready and follows project standards

## AUTOMATION RULES

### Manual Activation
- **SPEC MODE: Manual activation required** - Only activated when user explicitly says "SPEC DRIVEN"
- Automatic folder creation in `.spec/<feature-name>/` when activated
- Template file generation using predefined templates

### Stage Separation
- **Planning Stage**: Focused solely on creating comprehensive specifications
- **Implementation Stage**: Separate execution phase with iterative task completion
- Clear demarcation between planning and coding to ensure thorough analysis first

### Validation Checks
- Spec completeness validation before requirements phase
- Requirements coverage validation before tasks phase
- Task feasibility assessment
- Dependency analysis and conflict detection

### Progress Tracking
- Phase completion status updates
- Automatic todo list generation from tasks.md
- Implementation progress monitoring
- Quality gate enforcement

## FEATURE REQUEST PROCESSING

### 1. Manual Activation
When a user wants to use spec-driven development:
```
User says: "SPEC DRIVEN [feature description]"
Agent responds: "SPEC MODE: Activated. Initializing planning phase..."
```

### 2. Planning Phase Execution
```
Creating specification folder: .spec/<feature-name>/
Generating spec.md with analysis framework...
Planning phase initiated. Gathering context and requirements.
```

### 3. Requirements Phase Execution
```
Requirements phase initiated.
Analyzing functional and technical requirements...
Generating detailed requirements document...
```

### 4. Tasks Phase Execution
```
Tasks phase initiated.
Breaking down implementation into actionable tasks...
Generating task specifications...
```

### 5. Implementation Phase (Separate Stage)
```
Planning complete. Specification files created in .spec/<feature-name>/
To begin implementation, request: "IMPLEMENT [feature-name]"
```

### 6. Implementation Execution
```
Implementation stage initiated.
Loading task list from .spec/<feature-name>/tasks.md...
Beginning systematic task execution with iterative completion verification...
```

## QUALITY ASSURANCE

### Spec Quality Standards
- Problem statement clarity: Must be unambiguous
- Solution approach: Must be technically feasible
- Acceptance criteria: Must be measurable and testable
- Risk assessment: Must identify critical risks and mitigations

### Requirements Quality Standards
- Completeness: All functional aspects covered
- Consistency: No conflicting requirements
- Testability: Each requirement must be verifiable
- Traceability: Clear links to business objectives

### Task Quality Standards
- Granularity: Tasks should be 2-8 hours of work
- Independence: Minimal dependencies between tasks
- Clarity: Clear deliverables and acceptance criteria
- Estimation: Realistic time and complexity estimates

## EXCEPTION HANDLING

### Complex Features
For features requiring extensive analysis:
- Extended spec phase with stakeholder interviews
- Technical spike tasks for feasibility validation
- Prototype development before full implementation

### Urgent Requests
For urgent/critical features:
- Expedited spec review process
- Parallel requirements development
- Prioritized task execution
- Compressed timeline with quality checkpoints

### Blocked Features
When dependencies are identified:
- Dependency analysis and resolution planning
- Alternative implementation strategies
- Risk mitigation planning
- Contingency task development

## INTEGRATION WITH DEVELOPMENT TOOLS

### IDE Integration
- Automatic file creation in correct locations
- Template auto-completion
- Spec validation as you type
- Cross-reference linking between spec files

### Version Control
- Spec files committed with feature branches
- Change tracking for requirements evolution
- Review process for spec modifications
- Audit trail for decision rationale

### Project Management
- Task synchronization with project boards
- Progress tracking and reporting
- Dependency visualization
- Timeline and milestone management

## CONTINUOUS IMPROVEMENT

### Feedback Integration
- Post-implementation reviews
- Spec effectiveness metrics
- Template refinement based on usage
- Process optimization recommendations

### Template Evolution
- Regular template updates based on best practices
- Industry standard incorporation
- Team feedback integration
- Performance metric tracking

---

## TEMPLATES

### Spec Template Structure
```markdown
# Feature Specification: [Feature Name]

## Overview
[Brief description of the feature]

## Problem Statement
[Clear articulation of the problem]

## Solution Concept
[High-level solution approach]

## Success Criteria
[Measurable outcomes]

## Constraints
[Technical and business limitations]

## Risks
[Potential risks and mitigations]

## Stakeholders
[Who is affected and how]
```

### Requirements Template Structure
```markdown
# Requirements Document: [Feature Name]

## Functional Requirements
[User stories and use cases]

## Technical Requirements
[API, database, integration specs]

## User Experience Requirements
[UI/UX specifications]

## Quality Requirements
[Testing, performance, security specs]

## Dependencies
[External system dependencies]

## Assumptions
[Key assumptions and constraints]
```

### Tasks Template Structure
```markdown
# Implementation Tasks: [Feature Name]

## Backend Development
- [ ] Task 1: [Description] ([Estimated Hours])
- [ ] Task 2: [Description] ([Estimated Hours])

## Frontend Development
- [ ] Task 1: [Description] ([Estimated Hours])
- [ ] Task 2: [Description] ([Estimated Hours])

## Testing
- [ ] Task 1: [Description] ([Estimated Hours])
- [ ] Task 2: [Description] ([Estimated Hours])

## Documentation
- [ ] Task 1: [Description] ([Estimated Hours])
- [ ] Task 2: [Description] ([Estimated Hours])

## Deployment
- [ ] Task 1: [Description] ([Estimated Hours])
```

---

**SPEC MODE: Manual activation required. Say "SPEC DRIVEN" to begin planning phase. Implementation is separate and iterative.**